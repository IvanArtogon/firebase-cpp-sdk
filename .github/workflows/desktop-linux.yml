name: Desktop Builds

on: 
  push:
  pull_request:

env:
  CCACHE_DIR: ${{ github.workspace }}/ccache_dir

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ matrix.generator }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: ["Release", "Debug"]
        architecture: ["x64",]
        python_version: [2.7]
        generator: [ "Unix Makefiles", "Ninja"]
        include:
        - os: ubuntu-latest
          architecture: "x64"
          vcpkg_triplet: "x64-linux"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set env variables for subsequent steps (all)
        run: |
          echo "::set-env name=VCPKG_RESPONSE_FILE::external/vcpkg_${{ matrix.vcpkg_triplet }}_response_file.txt"
          echo "::set-env name=PIP_REQUIREMENTS_FILE::external/pip_requirements.txt"
          echo "::set-env name=MATRIX_UNIQUE_NAME::${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ matrix.generator }}"
          echo "::set-env name=BUILD_TYPE_NO_SPACES::$(echo -e "${{matrix.generator}}" | tr -d '[:space:]')"

      - name: Install Ninja
        if: startsWith(matrix.generator, 'Ninja')
        run: |
          sudo apt install ninja-build

      - name: Install system level applications
        id: ubuntu-apt-install
        run: |
          sudo apt install ccache
          echo "::set-env name=CCACHE_INSTALLED::1"

      - name: Cache vcpkg C++ dependencies
        id: cache_vcpkg
        uses: actions/cache@v2
        with:
          path: external/vcpkg/installed
          key: dev-vcpkg-${{ matrix.vcpkg_triplet }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}-${{ hashFiles('.git/modules/external/vcpkg/HEAD') }}

      - name: Install vcpkg packages
        if: steps.cache_vcpkg.outputs.cache-hit!='true'
        run: |
          ${{ github.workspace }}/external/vcpkg/bootstrap-vcpkg.sh -disableMetrics
          ${{ github.workspace }}/external/vcpkg/vcpkg install @${{env.VCPKG_RESPONSE_FILE}}

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.architecture }}

      - name: Get pip cache dir
        id: get_pip_cache_dir
        run: |
          echo "::set-output name=cachedir::$(pip cache dir)"

      - name: pip cache
        id: cache_pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.get_pip_cache_dir.outputs.cachedir }}
          key: dev-pip-${{ runner.os }}-${{ matrix.python_version }}-${{ matrix.architecture }}-${{ hashFiles(format('{0}', env.PIP_REQUIREMENTS_FILE)) }}

      - name: Install pip packages
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ env.PIP_REQUIREMENTS_FILE }}

      - name: Cache ccache files
        if: env.CCACHE_INSTALLED
        id: cache_ccache
        uses: actions/cache@v2
        with:
          path: ccache_dir
          key: dev-test-ccache-${{ env.MATRIX_UNIQUE_NAME }}

      - name: Configure 
        shell: bash
        run: |
          mkdir build
          cmake \
            -S . \
            -B build \
            -G "${{ matrix.generator }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=external/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} \
            -DFIREBASE_CPP_BUILD_TESTS=ON \
            -DFIREBASE_INCLUDE_FIRESTORE=OFF \
            -DFIREBASE_FORCE_FAKE_SECURE_STORAGE=ON

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }} -j 8

      - name: Stats for ccache
        if: env.CCACHE_INSTALLED
        run: ccache -s

      - name: Print built libraries
        shell: bash
        run: |
          find build -name "*.lib"
          find build -name "*.dll"
          find build -name "*.dylib"
          find build -name "*.a"
          find build -name "*.so"

      - name: Prep crash support
        # Ensures directory structure is in place to capture core files on Linux. 
        if: startsWith(matrix.build_type, 'Debug')
        shell: bash
        run: |
          echo '/tmp/cores/core.%E' | sudo tee /proc/sys/kernel/core_pattern
          sudo mkdir -p /tmp/cores/
          sudo rm -rf /tmp/cores/*
                    
      - name: Run tests
        env:
          LANG: en_US
        run: |
          ulimit -c unlimited 
          cd build
          sudo ctest --verbose
      
      - name: Prep bins for archive
        # Copies all of the binary files into one directory for ease in
        # archiving. Directory contents are then marked readable for the
        # archive step.
        if: failure() && startsWith(matrix.build_type, 'Debug')
        shell: bash
        run: |
          sudo rm -rf /tmp/bins/* || :
          sudo mkdir -p /tmp/bins/
          sudo rm -rf ./build/app/tests/firebase_test
          sudo cp -f ./build/*/tests/firebase* /tmp/bins
          sudo chmod -R +rwx /tmp/bins/* || :

      - name: Prep crash data for archive
        # Marks the contents of the core dump directory to be readable for the
        # archiving step on linux.
        shell: bash
        if: failure() && startsWith(matrix.build_type, 'Debug')
        run: |
          sudo chmod -R +rwx /tmp/cores/* || :

      - name: Archive crashes and binaries
        uses: actions/upload-artifact@v2
        if: failure() && startsWith(matrix.build_type, 'Debug')
        with:
          name: crashes-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ env.BUILD_TYPE_NO_SPACES }}
          path: |
            /tmp/cores/*
            /tmp/bins/*
